import { AnyZodiosRequestOptions, PluginId, ZodiosBodyByPath, ZodiosEndpointDefinition, ZodiosEndpointDefinitionByPath, ZodiosEndpointDefinitions, ZodiosOptions, ZodiosPathsByMethod, ZodiosPlugin, ZodiosRequestOptions, ZodiosRequestOptionsByPath } from "@zodios/core";
import { AxiosInstance, AxiosResponse } from "axios";
import { Narrow, PickRequired, ReadonlyDeep, RequiredKeys, UndefinedIfNever } from "@zodios/core/lib/utils.types";
import { Aliases, Method, ZodiosEndpointDefinitionByAlias, MutationMethod, ZodiosMutationAliasRequest, ZodiosBodyByAlias, ZodiosRequestOptionsByAlias, ZodiosAliasRequest, ZodiosResponseByPath } from "@zodios/core/lib/zodios.types";
import { z } from "zod";
export type PandiosResponseByPath<Api extends ZodiosEndpointDefinition[], M extends Method, Path extends ZodiosPathsByMethod<Api, M>, Frontend extends boolean = true> = Frontend extends true ? AsyncGenerator<z.output<ZodiosEndpointDefinitionByPath<Api, M, Path>[number]["response"]>> : z.input<ZodiosEndpointDefinitionByPath<Api, M, Path>[number]["response"]>;
type PandiosAliases<Api extends ZodiosEndpointDefinition[]> = {
    [Alias in Aliases<Api>]: ZodiosEndpointDefinitionByAlias<Api, Alias>[number]["method"] extends MutationMethod ? ZodiosMutationAliasRequest<ZodiosBodyByAlias<Api, Alias>, ZodiosRequestOptionsByAlias<Api, Alias>, PandiosResponseByAlias<Api, Alias>> : ZodiosAliasRequest<ZodiosRequestOptionsByAlias<Api, Alias>, PandiosResponseByAlias<Api, Alias>>;
};
type PandiosResponseByAlias<Api extends ZodiosEndpointDefinition[], Alias extends string> = Alias extends `search${infer Rest}` ? AsyncGenerator<z.output<ZodiosEndpointDefinitionByAlias<Api, Alias>[number]["response"]>> : z.output<ZodiosEndpointDefinitionByAlias<Api, Alias>[number]["response"]>;
/**
 * omit properties from an object
 * @param obj - the object to omit properties from
 * @param keys - the keys to omit
 * @returns the object with the omitted properties
 */
export declare function omit<T, K extends keyof T>(obj: T | undefined, keys: K[]): Omit<T, K>;
export declare function replacePathParams(config: ReadonlyDeep<AnyZodiosRequestOptions>): string;
export declare class ZodiosPlugins {
    readonly key: string;
    private plugins;
    /**
     * Constructor
     * @param method - http method of the endpoint where the plugins are registered
     * @param path - path of the endpoint where the plugins are registered
     */
    constructor(method: Method | "any", path: string);
    /**
     * Get the index of a plugin by name
     * @param name - name of the plugin
     * @returns the index of the plugin if found, -1 otherwise
     */
    indexOf(name: string): number;
    /**
     * register a plugin
     * if the plugin has a name it will be replaced if it already exists
     * @param plugin - plugin to register
     * @returns unique id of the plugin
     */
    use(plugin: ZodiosPlugin): PluginId;
    /**
     * unregister a plugin
     * @param plugin - plugin to unregister
     */
    eject(plugin: PluginId | string): void;
    /**
     * Intercept the request config by applying all plugins
     * before using it to send a request to the server
     * @param config - request config
     * @returns the modified config
     */
    interceptRequest(api: ZodiosEndpointDefinitions, config: ReadonlyDeep<AnyZodiosRequestOptions>): Promise<import("@zodios/core/lib/utils.types").DeepReadonlyObject<{
        method: Method;
        url: string;
        params?: Record<string, unknown> | undefined;
        queries?: Record<string, unknown> | undefined;
        headers?: Record<string, string> | undefined;
        baseURL?: string | undefined;
        data?: unknown;
        transformRequest?: (import("axios").AxiosRequestTransformer | import("axios").AxiosRequestTransformer[]) | undefined;
        transformResponse?: (import("axios").AxiosResponseTransformer | import("axios").AxiosResponseTransformer[]) | undefined;
        paramsSerializer?: (import("axios").ParamsSerializerOptions | import("axios").CustomParamsSerializer) | undefined;
        timeout?: number | undefined;
        timeoutErrorMessage?: string | undefined;
        withCredentials?: boolean | undefined;
        adapter?: ((string | import("axios").AxiosAdapter) | (string | import("axios").AxiosAdapter)[]) | undefined;
        auth?: import("axios").AxiosBasicCredentials | undefined;
        responseType?: import("axios").ResponseType | undefined;
        responseEncoding?: (import("axios").responseEncoding | string) | undefined;
        xsrfCookieName?: string | undefined;
        xsrfHeaderName?: string | undefined;
        onUploadProgress?: ((progressEvent: import("axios").AxiosProgressEvent) => void) | undefined;
        onDownloadProgress?: ((progressEvent: import("axios").AxiosProgressEvent) => void) | undefined;
        maxContentLength?: number | undefined;
        validateStatus?: ((status: number) => boolean) | null | undefined;
        maxBodyLength?: number | undefined;
        maxRedirects?: number | undefined;
        maxRate?: number | [number, number] | undefined;
        beforeRedirect?: ((options: Record<string, any>, responseDetails: {
            headers: Record<string, string>;
            statusCode: import("axios").HttpStatusCode;
        }) => void) | undefined;
        socketPath?: string | null | undefined;
        transport?: any;
        httpAgent?: any;
        httpsAgent?: any;
        proxy?: (import("axios").AxiosProxyConfig | false) | undefined;
        cancelToken?: import("axios").CancelToken | undefined;
        decompress?: boolean | undefined;
        transitional?: import("axios").TransitionalOptions | undefined;
        signal?: import("axios").GenericAbortSignal | undefined;
        insecureHTTPParser?: boolean | undefined;
        env?: {
            FormData?: (new (...args: any[]) => object) | undefined;
        } | undefined;
        formSerializer?: import("axios").FormSerializerOptions | undefined;
        family?: import("axios").AddressFamily;
        lookup?: ((hostname: string, options: object, cb: (err: Error | null, address: import("axios").LookupAddress | import("axios").LookupAddress[], family?: import("axios").AddressFamily) => void) => void) | ((hostname: string, options: object) => Promise<[address: import("axios").LookupAddressEntry | import("axios").LookupAddressEntry[], family?: import("axios").AddressFamily] | import("axios").LookupAddress>) | undefined;
        withXSRFToken?: boolean | ((config: import("axios").InternalAxiosRequestConfig) => boolean | undefined) | undefined;
        fetchOptions?: Record<string, any> | undefined;
        'axios-retry'?: import("axios-retry").IAxiosRetryConfigExtended | undefined;
    }>>;
    /**
     * Intercept the response from server by applying all plugins
     * @param api - endpoint descriptions
     * @param config - request config
     * @param response - response from the server
     * @returns the modified response
     */
    interceptResponse(api: ZodiosEndpointDefinitions, config: ReadonlyDeep<AnyZodiosRequestOptions>, response: Promise<AxiosResponse>): Promise<AxiosResponse<any, any>>;
    /**
     * Get the number of plugins registered
     * @returns the number of plugins registered
     */
    count(): number;
}
/**
 * zodios api client based on axios
 */
export declare class ZodiosClass<Api extends ZodiosEndpointDefinitions> {
    private axiosInstance;
    readonly options: PickRequired<ZodiosOptions, "validate" | "transform" | "sendDefaults">;
    readonly api: Api;
    private endpointPlugins;
    /**
     * constructor
     * @param baseURL - the base url to use - if omited will use the browser domain
     * @param api - the description of all the api endpoints
     * @param options - the options to setup the client API
     * @example
     *   const apiClient = new Zodios("https://jsonplaceholder.typicode.com", [
     *     {
     *       method: "get",
     *       path: "/users",
     *       description: "Get all users",
     *       parameters: [
     *         {
     *           name: "q",
     *           type: "Query",
     *           schema: z.string(),
     *         },
     *         {
     *           name: "page",
     *           type: "Query",
     *           schema: z.string().optional(),
     *         },
     *       ],
     *       response: z.array(z.object({ id: z.number(), name: z.string() })),
     *     }
     *   ]);
     */
    constructor(api: Narrow<Api>, options?: ZodiosOptions);
    constructor(baseUrl: string, api: Narrow<Api>, options?: ZodiosOptions);
    private initPlugins;
    private getAnyEndpointPlugins;
    private findAliasEndpointPlugins;
    private findEnpointPlugins;
    /**
     * get the base url of the api
     */
    get baseURL(): string | undefined;
    /**
     * get the underlying axios instance
     */
    get axios(): AxiosInstance;
    /**
     * register a plugin to intercept the requests or responses
     * @param plugin - the plugin to use
     * @returns an id to allow you to unregister the plugin
     */
    use(plugin: ZodiosPlugin): PluginId;
    use<Alias extends Aliases<Api>>(alias: Alias, plugin: ZodiosPlugin): PluginId;
    use<M extends Method, Path extends ZodiosPathsByMethod<Api, M>>(method: M, path: Path, plugin: ZodiosPlugin): PluginId;
    /**
     * unregister a plugin
     * if the plugin name is provided instead of the registration plugin id,
     * it will unregister the plugin with that name only for non endpoint plugins
     * @param plugin - id of the plugin to remove
     */
    eject(plugin: PluginId | string): void;
    private injectAliasEndpoints;
    /**
     * make a request to the api
     * @param config - the config to setup zodios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    request<M extends Method, Path extends string>(config: Path extends ZodiosPathsByMethod<Api, M> ? ReadonlyDeep<ZodiosRequestOptions<Api, M, Path>> : ReadonlyDeep<ZodiosRequestOptions<Api, M, ZodiosPathsByMethod<Api, M>>>, isList?: boolean): Promise<ZodiosResponseByPath<Api, M, Path extends ZodiosPathsByMethod<Api, M> ? Path : never>>;
    paginatedRequest<M extends Method, Path extends string>(config: Path extends ZodiosPathsByMethod<Api, M> ? ReadonlyDeep<ZodiosRequestOptions<Api, M, Path>> : ReadonlyDeep<ZodiosRequestOptions<Api, M, ZodiosPathsByMethod<Api, M>>>): AsyncGenerator<any, void, unknown>;
    /**
     * make a get request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    get<Path extends ZodiosPathsByMethod<Api, "get">, TConfig extends ZodiosRequestOptionsByPath<Api, "get", Path>>(path: Path, ...[config]: RequiredKeys<TConfig> extends never ? [config?: ReadonlyDeep<TConfig>] : [config: ReadonlyDeep<TConfig>]): Promise<PandiosResponseByPath<Api, "get", Path>>;
    /**
     * make a post request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    post<Path extends ZodiosPathsByMethod<Api, "post">, TConfig extends ZodiosRequestOptionsByPath<Api, "post", Path>>(path: Path, data: ReadonlyDeep<UndefinedIfNever<ZodiosBodyByPath<Api, "post", Path>>>, ...[config]: RequiredKeys<TConfig> extends never ? [config?: ReadonlyDeep<TConfig>] : [config: ReadonlyDeep<TConfig>]): Promise<PandiosResponseByPath<Api, "post", Path>>;
    /**
     * make a put request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    put<Path extends ZodiosPathsByMethod<Api, "put">, TConfig extends ZodiosRequestOptionsByPath<Api, "put", Path>>(path: Path, data: ReadonlyDeep<UndefinedIfNever<ZodiosBodyByPath<Api, "put", Path>>>, ...[config]: RequiredKeys<TConfig> extends never ? [config?: ReadonlyDeep<TConfig>] : [config: ReadonlyDeep<TConfig>]): Promise<PandiosResponseByPath<Api, "put", Path>>;
    /**
     * make a patch request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    patch<Path extends ZodiosPathsByMethod<Api, "patch">, TConfig extends ZodiosRequestOptionsByPath<Api, "patch", Path>>(path: Path, data: ReadonlyDeep<UndefinedIfNever<ZodiosBodyByPath<Api, "patch", Path>>>, ...[config]: RequiredKeys<TConfig> extends never ? [config?: ReadonlyDeep<TConfig>] : [config: ReadonlyDeep<TConfig>]): Promise<PandiosResponseByPath<Api, "patch", Path>>;
    /**
     * make a delete request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    delete<Path extends ZodiosPathsByMethod<Api, "delete">, TConfig extends ZodiosRequestOptionsByPath<Api, "delete", Path>>(path: Path, data: ReadonlyDeep<UndefinedIfNever<ZodiosBodyByPath<Api, "delete", Path>>>, ...[config]: RequiredKeys<TConfig> extends never ? [config?: ReadonlyDeep<TConfig>] : [config: ReadonlyDeep<TConfig>]): Promise<PandiosResponseByPath<Api, "delete", Path>>;
}
export type PandiosInstance<Api extends ZodiosEndpointDefinitions> = ZodiosClass<Api> & PandiosAliases<Api>;
export type ZodiosConstructor = {
    new <Api extends ZodiosEndpointDefinitions>(api: Narrow<Api>, options?: ZodiosOptions): PandiosInstance<Api>;
    new <Api extends ZodiosEndpointDefinitions>(baseUrl: string, api: Narrow<Api>, options?: ZodiosOptions): PandiosInstance<Api>;
};
export declare const Pandios: ZodiosConstructor;
export {};
