var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
import axios from "axios";
import { checkApi, formDataPlugin, formURLPlugin, headerPlugin, zodValidationPlugin } from "@zodios/core";
/**
 * omit properties from an object
 * @param obj - the object to omit properties from
 * @param keys - the keys to omit
 * @returns the object with the omitted properties
 */
export function omit(obj, keys) {
    var ret = __assign({}, obj);
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        delete ret[key];
    }
    return ret;
}
var paramsRegExp = /:([a-zA-Z_][a-zA-Z0-9_]*)/g;
export function replacePathParams(config) {
    var result = config.url;
    var params = config.params;
    if (params) {
        result = result.replace(paramsRegExp, function (match, key) {
            return key in params ? "".concat(params[key]) : match;
        });
    }
    return result;
}
var ZodiosPlugins = /** @class */ (function () {
    /**
     * Constructor
     * @param method - http method of the endpoint where the plugins are registered
     * @param path - path of the endpoint where the plugins are registered
     */
    function ZodiosPlugins(method, path) {
        this.plugins = [];
        this.key = "".concat(method, "-").concat(path);
    }
    /**
     * Get the index of a plugin by name
     * @param name - name of the plugin
     * @returns the index of the plugin if found, -1 otherwise
     */
    ZodiosPlugins.prototype.indexOf = function (name) {
        return this.plugins.findIndex(function (p) { return (p === null || p === void 0 ? void 0 : p.name) === name; });
    };
    /**
     * register a plugin
     * if the plugin has a name it will be replaced if it already exists
     * @param plugin - plugin to register
     * @returns unique id of the plugin
     */
    ZodiosPlugins.prototype.use = function (plugin) {
        if (plugin.name) {
            var id = this.indexOf(plugin.name);
            if (id !== -1) {
                this.plugins[id] = plugin;
                return { key: this.key, value: id };
            }
        }
        this.plugins.push(plugin);
        return { key: this.key, value: this.plugins.length - 1 };
    };
    /**
     * unregister a plugin
     * @param plugin - plugin to unregister
     */
    ZodiosPlugins.prototype.eject = function (plugin) {
        if (typeof plugin === "string") {
            var id = this.indexOf(plugin);
            if (id === -1) {
                throw new Error("Plugin with name '".concat(plugin, "' not found"));
            }
            this.plugins[id] = undefined;
        }
        else {
            if (plugin.key !== this.key) {
                throw new Error("Plugin with key '".concat(plugin.key, "' is not registered for endpoint '").concat(this.key, "'"));
            }
            this.plugins[plugin.value] = undefined;
        }
    };
    /**
     * Intercept the request config by applying all plugins
     * before using it to send a request to the server
     * @param config - request config
     * @returns the modified config
     */
    ZodiosPlugins.prototype.interceptRequest = function (api, config) {
        return __awaiter(this, void 0, void 0, function () {
            var pluginConfig, _i, _a, plugin;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        pluginConfig = config;
                        _i = 0, _a = this.plugins;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        plugin = _a[_i];
                        if (!(plugin === null || plugin === void 0 ? void 0 : plugin.request)) return [3 /*break*/, 3];
                        return [4 /*yield*/, plugin.request(api, pluginConfig)];
                    case 2:
                        pluginConfig = _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, pluginConfig];
                }
            });
        });
    };
    /**
     * Intercept the response from server by applying all plugins
     * @param api - endpoint descriptions
     * @param config - request config
     * @param response - response from the server
     * @returns the modified response
     */
    ZodiosPlugins.prototype.interceptResponse = function (api, config, response) {
        return __awaiter(this, void 0, void 0, function () {
            var pluginResponse, _loop_1, this_1, index;
            return __generator(this, function (_a) {
                pluginResponse = response;
                _loop_1 = function (index) {
                    var plugin = this_1.plugins[index];
                    if (plugin) {
                        pluginResponse = pluginResponse.then((plugin === null || plugin === void 0 ? void 0 : plugin.response)
                            ? function (res) { return plugin.response(api, config, res); }
                            : undefined, (plugin === null || plugin === void 0 ? void 0 : plugin.error) ? function (err) { return plugin.error(api, config, err); } : undefined);
                    }
                };
                this_1 = this;
                for (index = this.plugins.length - 1; index >= 0; index--) {
                    _loop_1(index);
                }
                return [2 /*return*/, pluginResponse];
            });
        });
    };
    /**
     * Get the number of plugins registered
     * @returns the number of plugins registered
     */
    ZodiosPlugins.prototype.count = function () {
        return this.plugins.reduce(function (count, plugin) { return (plugin ? count + 1 : count); }, 0);
    };
    return ZodiosPlugins;
}());
export { ZodiosPlugins };
/**
 * zodios api client based on axios
 */
var ZodiosClass = /** @class */ (function () {
    function ZodiosClass(arg1, arg2, arg3) {
        this.endpointPlugins = new Map();
        var options;
        if (!arg1) {
            if (Array.isArray(arg2)) {
                throw new Error("Zodios: missing base url");
            }
            throw new Error("Zodios: missing api description");
        }
        var baseURL;
        if (typeof arg1 === "string" && Array.isArray(arg2)) {
            baseURL = arg1;
            this.api = arg2;
            options = arg3 || {};
        }
        else if (Array.isArray(arg1) && !Array.isArray(arg2)) {
            this.api = arg1;
            options = arg2 || {};
        }
        else {
            throw new Error("Zodios: api must be an array");
        }
        checkApi(this.api);
        this.options = __assign({ validate: true, transform: true, sendDefaults: false }, options);
        if (this.options.axiosInstance) {
            this.axiosInstance = this.options.axiosInstance;
        }
        else {
            this.axiosInstance = axios.create(__assign({}, this.options.axiosConfig));
        }
        if (baseURL)
            this.axiosInstance.defaults.baseURL = baseURL;
        this.injectAliasEndpoints();
        this.initPlugins();
        if ([true, "all", "request", "response"].includes(this.options.validate)) {
            this.use(zodValidationPlugin(this.options));
        }
    }
    ZodiosClass.prototype.initPlugins = function () {
        var _this = this;
        this.endpointPlugins.set("any-any", new ZodiosPlugins("any", "any"));
        this.api.forEach(function (endpoint) {
            var plugins = new ZodiosPlugins(endpoint.method, endpoint.path);
            switch (endpoint.requestFormat) {
                case "binary":
                    plugins.use(headerPlugin("Content-Type", "application/octet-stream"));
                    break;
                case "form-data":
                    plugins.use(formDataPlugin());
                    break;
                case "form-url":
                    plugins.use(formURLPlugin());
                    break;
                case "text":
                    plugins.use(headerPlugin("Content-Type", "text/plain"));
                    break;
            }
            _this.endpointPlugins.set("".concat(endpoint.method, "-").concat(endpoint.path), plugins);
        });
    };
    ZodiosClass.prototype.getAnyEndpointPlugins = function () {
        return this.endpointPlugins.get("any-any");
    };
    ZodiosClass.prototype.findAliasEndpointPlugins = function (alias) {
        var endpoint = this.api.find(function (endpoint) { return endpoint.alias === alias; });
        if (endpoint) {
            return this.endpointPlugins.get("".concat(endpoint.method, "-").concat(endpoint.path));
        }
        return undefined;
    };
    ZodiosClass.prototype.findEnpointPlugins = function (method, path) {
        return this.endpointPlugins.get("".concat(method, "-").concat(path));
    };
    Object.defineProperty(ZodiosClass.prototype, "baseURL", {
        /**
         * get the base url of the api
         */
        get: function () {
            return this.axiosInstance.defaults.baseURL;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodiosClass.prototype, "axios", {
        /**
         * get the underlying axios instance
         */
        get: function () {
            return this.axiosInstance;
        },
        enumerable: false,
        configurable: true
    });
    ZodiosClass.prototype.use = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (typeof args[0] === "object") {
            var plugins = this.getAnyEndpointPlugins();
            return plugins.use(args[0]);
        }
        else if (typeof args[0] === "string" && typeof args[1] === "object") {
            var plugins = this.findAliasEndpointPlugins(args[0]);
            if (!plugins)
                throw new Error("Zodios: no alias '".concat(args[0], "' found to register plugin"));
            return plugins.use(args[1]);
        }
        else if (typeof args[0] === "string" &&
            typeof args[1] === "string" &&
            typeof args[2] === "object") {
            var plugins = this.findEnpointPlugins(args[0], args[1]);
            if (!plugins)
                throw new Error("Zodios: no endpoint '".concat(args[0], " ").concat(args[1], "' found to register plugin"));
            return plugins.use(args[2]);
        }
        throw new Error("Zodios: invalid plugin registration");
    };
    /**
     * unregister a plugin
     * if the plugin name is provided instead of the registration plugin id,
     * it will unregister the plugin with that name only for non endpoint plugins
     * @param plugin - id of the plugin to remove
     */
    ZodiosClass.prototype.eject = function (plugin) {
        var _a;
        if (typeof plugin === "string") {
            var plugins = this.getAnyEndpointPlugins();
            plugins.eject(plugin);
            return;
        }
        (_a = this.endpointPlugins.get(plugin.key)) === null || _a === void 0 ? void 0 : _a.eject(plugin);
    };
    ZodiosClass.prototype.injectAliasEndpoints = function () {
        var _this = this;
        this.api.forEach(function (endpoint) {
            var _a, _b;
            var isPaginated = (_b = (_a = endpoint.alias) === null || _a === void 0 ? void 0 : _a.startsWith('search')) !== null && _b !== void 0 ? _b : false;
            if (endpoint.alias) {
                if (["put", "patch", "delete"].includes(endpoint.method)) {
                    _this[endpoint.alias] = function (data, config) {
                        return _this.request(__assign(__assign({}, config), { method: endpoint.method, url: endpoint.path, data: data }));
                    };
                }
                else {
                    if (isPaginated) {
                        _this[endpoint.alias] = function (data, config) {
                            return _this.paginatedRequest(__assign(__assign({}, config), { data: data, method: endpoint.method, url: endpoint.path }));
                        };
                    }
                    else {
                        _this[endpoint.alias] = function (data, config) {
                            return _this.request(__assign(__assign({}, config), { method: endpoint.method, url: endpoint.path, data: data }), isPaginated);
                        };
                    }
                }
            }
        });
    };
    /**
     * make a request to the api
     * @param config - the config to setup zodios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    ZodiosClass.prototype.request = function (config, isList) {
        return __awaiter(this, void 0, void 0, function () {
            var conf, anyPlugin, endpointPlugin, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        conf = config;
                        anyPlugin = this.getAnyEndpointPlugins();
                        endpointPlugin = this.findEnpointPlugins(conf.method, conf.url);
                        return [4 /*yield*/, anyPlugin.interceptRequest(this.api, conf)];
                    case 1:
                        conf = _a.sent();
                        if (!endpointPlugin) return [3 /*break*/, 3];
                        return [4 /*yield*/, endpointPlugin.interceptRequest(this.api, conf)];
                    case 2:
                        conf = _a.sent();
                        _a.label = 3;
                    case 3:
                        response = this.axiosInstance.request(__assign(__assign({}, omit(conf, ["params", "queries"])), { url: replacePathParams(conf), params: conf.queries }));
                        if (endpointPlugin) {
                            response = endpointPlugin.interceptResponse(this.api, conf, response);
                        }
                        response = anyPlugin.interceptResponse(this.api, conf, response);
                        return [4 /*yield*/, response];
                    case 4: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    ZodiosClass.prototype.paginatedRequest = function (config) {
        return __asyncGenerator(this, arguments, function paginatedRequest_1() {
            var hasNextPage, response, conf, per_page, page, searchEndpointToResultsArray, searchEndpoint, resultsProp, newConf, anyPlugin, endpointPlugin, pagination, results, _i, results_1, result;
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        hasNextPage = false;
                        conf = config;
                        per_page = (_b = (_a = conf === null || conf === void 0 ? void 0 : conf.queries) === null || _a === void 0 ? void 0 : _a.limit) !== null && _b !== void 0 ? _b : 100;
                        page = Number((_c = conf === null || conf === void 0 ? void 0 : conf.queries) === null || _c === void 0 ? void 0 : _c.page) || 1;
                        searchEndpointToResultsArray = {
                            mixed_people: 'contacts',
                            mixed_companies: 'organizations',
                            accounts: 'accounts',
                            contacts: 'contacts',
                            opportunities: 'opportunities',
                            emailer_campaigns: 'emailer_campaigns',
                            tasks: 'tasks',
                            users: 'users',
                        };
                        searchEndpoint = conf.url.match(/([^/]+)\/search/);
                        resultsProp = searchEndpoint && searchEndpointToResultsArray[searchEndpoint[1]];
                        if (!resultsProp)
                            throw new Error('unknown paginated resource for the Apollo.io');
                        _g.label = 1;
                    case 1:
                        conf = __assign(__assign({}, conf), { queries: __assign(__assign({}, (_d = conf === null || conf === void 0 ? void 0 : conf.queries) !== null && _d !== void 0 ? _d : {}), { "per_page": per_page, "page": page }) });
                        newConf = conf;
                        anyPlugin = this.getAnyEndpointPlugins();
                        endpointPlugin = this.findEnpointPlugins(conf.method, conf.url);
                        return [4 /*yield*/, __await(anyPlugin.interceptRequest(this.api, conf))];
                    case 2:
                        newConf = _g.sent();
                        if (!endpointPlugin) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await(endpointPlugin.interceptRequest(this.api, conf))];
                    case 3:
                        newConf = _g.sent();
                        _g.label = 4;
                    case 4:
                        response = this.axiosInstance.request(__assign(__assign({}, omit(newConf, ["params", "queries"])), { url: replacePathParams(newConf), params: newConf.queries, data: newConf.data }));
                        return [4 /*yield*/, __await(response)];
                    case 5:
                        pagination = (_e = (_g.sent()).data) === null || _e === void 0 ? void 0 : _e.pagination;
                        if (endpointPlugin) {
                            response = endpointPlugin.interceptResponse(this.api, newConf, response);
                        }
                        return [4 /*yield*/, __await(response)];
                    case 6:
                        results = (_f = (_g.sent()).data) === null || _f === void 0 ? void 0 : _f[resultsProp];
                        _i = 0, results_1 = results;
                        _g.label = 7;
                    case 7:
                        if (!(_i < results_1.length)) return [3 /*break*/, 11];
                        result = results_1[_i];
                        return [4 /*yield*/, __await(result)];
                    case 8: return [4 /*yield*/, _g.sent()];
                    case 9:
                        _g.sent();
                        _g.label = 10;
                    case 10:
                        _i++;
                        return [3 /*break*/, 7];
                    case 11:
                        hasNextPage = pagination.total_pages > page;
                        page++;
                        _g.label = 12;
                    case 12:
                        if (hasNextPage) return [3 /*break*/, 1];
                        _g.label = 13;
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * make a get request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    ZodiosClass.prototype.get = function (path_1) {
        return __awaiter(this, arguments, void 0, function (path) {
            var _i;
            var _a = [];
            for (_i = 1; _i < arguments.length; _i++) {
                _a[_i - 1] = arguments[_i];
            }
            var config = _a[0];
            return __generator(this, function (_b) {
                return [2 /*return*/, this.request(__assign(__assign({}, config), { method: "get", url: path }))];
            });
        });
    };
    /**
     * make a post request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    ZodiosClass.prototype.post = function (path_1, data_1) {
        return __awaiter(this, arguments, void 0, function (path, data) {
            var _i;
            var _a = [];
            for (_i = 2; _i < arguments.length; _i++) {
                _a[_i - 2] = arguments[_i];
            }
            var config = _a[0];
            return __generator(this, function (_b) {
                return [2 /*return*/, this.request(__assign(__assign({}, config), { method: "post", url: path, data: data }))];
            });
        });
    };
    /**
     * make a put request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    ZodiosClass.prototype.put = function (path_1, data_1) {
        return __awaiter(this, arguments, void 0, function (path, data) {
            var _i;
            var _a = [];
            for (_i = 2; _i < arguments.length; _i++) {
                _a[_i - 2] = arguments[_i];
            }
            var config = _a[0];
            return __generator(this, function (_b) {
                return [2 /*return*/, this.request(__assign(__assign({}, config), { method: "put", url: path, data: data }))];
            });
        });
    };
    /**
     * make a patch request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    ZodiosClass.prototype.patch = function (path_1, data_1) {
        return __awaiter(this, arguments, void 0, function (path, data) {
            var _i;
            var _a = [];
            for (_i = 2; _i < arguments.length; _i++) {
                _a[_i - 2] = arguments[_i];
            }
            var config = _a[0];
            return __generator(this, function (_b) {
                return [2 /*return*/, this.request(__assign(__assign({}, config), { method: "patch", url: path, data: data }))];
            });
        });
    };
    /**
     * make a delete request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    ZodiosClass.prototype.delete = function (path_1, data_1) {
        return __awaiter(this, arguments, void 0, function (path, data) {
            var _i;
            var _a = [];
            for (_i = 2; _i < arguments.length; _i++) {
                _a[_i - 2] = arguments[_i];
            }
            var config = _a[0];
            return __generator(this, function (_b) {
                return [2 /*return*/, this.request(__assign(__assign({}, config), { method: "delete", url: path, data: data }))];
            });
        });
    };
    return ZodiosClass;
}());
export { ZodiosClass };
export var Pandios = ZodiosClass;
