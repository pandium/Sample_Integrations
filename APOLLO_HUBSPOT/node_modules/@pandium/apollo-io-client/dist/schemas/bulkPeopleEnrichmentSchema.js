import { z } from "zod";
/**
 * @description 400
 */
export var bulkPeopleEnrichment400Schema = z.union([z.object({ "status": z.string().nullish(), "error_code": z.string().nullish(), "error_message": z.string().nullish() }), z.object({ "status": z.string().nullish(), "error_code": z.string().nullish(), "error_message": z.string().nullish() })]);
/**
      * @description 401
      */
export var bulkPeopleEnrichment401Schema = z.any();
/**
      * @description 422
      */
export var bulkPeopleEnrichment422Schema = z.union([z.object({ "status": z.string().nullish(), "error_code": z.string().nullish(), "error_message": z.string().nullish(), "stack_trace": z.string().nullish() }), z.object({ "status": z.string().nullish(), "error_code": z.string().nullish(), "error_message": z.string().nullish(), "stack_trace": z.string().nullish() })]);
/**
      * @description 429
      */
export var bulkPeopleEnrichment429Schema = z.object({ "message": z.string().nullish() });
export var bulkPeopleEnrichmentMutationRequestSchema = z.object({ "details": z.array(z.object({ "first_name": z.string().describe("The first name of the person. This is typically used in combination with the 'last_name' parameter. <br><br>Example: 'tim'").nullish(), "last_name": z.string().describe("The last name of the person. This is typically used in combination with the 'first_name' parameter. <br><br>Example: 'zheng'").nullish(), "name": z.string().describe("The full name of the person. This will typically be a first name and last name separated by a space.  If you use this parameter, you do not need to use the 'first_name' and 'last_name' parameters. <br><br>Example: 'tim zheng'").nullish(), "email": z.string().email().describe("The email address of the person. <br><br>Example: 'example@email.com'").nullish(), "hashed_email": z.string().describe("The hashed email of the person. The email should adhere to either the MD5 or SHA-256 hash format. <br><br>Example: '8d935115b9ff4489f2d1f9249503cadf' (MD5) or '97817c0c49994eb500ad0a5e7e2d8aed51977b26424d508f66e4e8887746a152' (SHA-256)").nullish(), "organization_name": z.string().describe("The name of the person's employer. This can be the current employer or a previous employer. <br><br>Example: 'apollo'").nullish(), "domain": z.string().describe("The domain name for the person's employer. This can be the current employer or a previous employer. Do not include 'www.', the '@' symbol, or similar. <br><br>Example: 'apollo.io' or 'microsoft.com'").nullish(), "id": z.string().describe("The Apollo ID for the person. Each person in the Apollo database is assigned a unique ID. <br><br>To find IDs, call the <a href=\"https://docs.apollo.io/reference/people-search\" target=\"_blank\">People Search endpoint</a> and identify the values for 'person_id'. <br><br>Example: '587cf802f65125cad923a266'").nullish(), "linkedin_url": z.string().describe("The URL for the person's LinkedIn profile. <br><br>Example: 'http://www.linkedin.com/in/tim-zheng-677ba010'").nullish() })).describe("Provide info for each person you want to enrich as an object within this array. Add up to 10 people.") });
/**
      * @description 200
      */
export var bulkPeopleEnrichmentMutationResponseSchema = z.object({ "status": z.string().nullish(), "error_code": z.any().nullish(), "error_message": z.any().nullish(), "total_requested_enrichments": z.number().nullish(), "unique_enriched_records": z.number().nullish(), "missing_records": z.number().nullish(), "credits_consumed": z.number().nullish(), "matches": z.array(z.object({ "id": z.string().nullish(), "first_name": z.string().nullish(), "last_name": z.string().nullish(), "name": z.string().nullish(), "linkedin_url": z.string().nullish(), "title": z.string().nullish(), "email_status": z.string().nullish(), "photo_url": z.string().nullish(), "twitter_url": z.any().nullish(), "github_url": z.any().nullish(), "facebook_url": z.any().nullish(), "extrapolated_email_confidence": z.any().nullish(), "headline": z.string().nullish(), "email": z.string().email().nullish(), "organization_id": z.string().nullish(), "employment_history": z.array(z.object({ "_id": z.string().nullish(), "created_at": z.any().nullish(), "current": z.boolean().default(true).nullish(), "degree": z.any().nullish(), "description": z.any().nullish(), "emails": z.any().nullish(), "end_date": z.any().nullish(), "grade_level": z.any().nullish(), "kind": z.any().nullish(), "major": z.any().nullish(), "organization_id": z.string().nullish(), "organization_name": z.string().nullish(), "raw_address": z.any().nullish(), "start_date": z.string().nullish(), "title": z.string().nullish(), "updated_at": z.any().nullish(), "id": z.string().nullish(), "key": z.string().nullish() })).nullish(), "state": z.string().nullish(), "city": z.string().nullish(), "country": z.string().nullish(), "organization": z.object({ "id": z.string().nullish(), "name": z.string().nullish(), "website_url": z.string().nullish(), "blog_url": z.any().nullish(), "angellist_url": z.any().nullish(), "linkedin_url": z.string().nullish(), "twitter_url": z.string().nullish(), "facebook_url": z.string().nullish(), "primary_phone": z.object({}).nullish(), "languages": z.array(z.any()).nullish(), "alexa_ranking": z.number().nullish(), "phone": z.any().nullish(), "linkedin_uid": z.string().nullish(), "founded_year": z.number().nullish(), "publicly_traded_symbol": z.any().nullish(), "publicly_traded_exchange": z.any().nullish(), "logo_url": z.string().nullish(), "crunchbase_url": z.any().nullish(), "primary_domain": z.string().nullish(), "industry": z.string().nullish(), "keywords": z.array(z.string()).nullish(), "estimated_num_employees": z.number().nullish(), "industries": z.array(z.string()).nullish(), "secondary_industries": z.array(z.any()).nullish(), "snippets_loaded": z.boolean().default(true).nullish(), "industry_tag_id": z.string().nullish(), "industry_tag_hash": z.object({ "information technology & services": z.string().nullish() }).nullish(), "retail_location_count": z.number().nullish(), "raw_address": z.string().nullish(), "street_address": z.string().nullish(), "city": z.string().nullish(), "state": z.string().nullish(), "postal_code": z.string().nullish(), "country": z.string().nullish() }).nullish(), "is_likely_to_engage": z.boolean().default(true).nullish(), "account_id": z.string().nullish(), "account": z.object({ "id": z.string().nullish(), "name": z.string().nullish(), "website_url": z.string().nullish(), "blog_url": z.any().nullish(), "angellist_url": z.any().nullish(), "linkedin_url": z.string().nullish(), "twitter_url": z.string().nullish(), "facebook_url": z.string().nullish(), "primary_phone": z.object({}).nullish(), "languages": z.array(z.any()).nullish(), "alexa_ranking": z.number().nullish(), "phone": z.string().nullish(), "linkedin_uid": z.string().nullish(), "founded_year": z.number().nullish(), "publicly_traded_symbol": z.any().nullish(), "publicly_traded_exchange": z.any().nullish(), "logo_url": z.string().nullish(), "crunchbase_url": z.any().nullish(), "primary_domain": z.string().nullish(), "domain": z.string().nullish(), "team_id": z.string().nullish(), "organization_id": z.string().nullish(), "account_stage_id": z.any().nullish(), "source": z.string().nullish(), "original_source": z.string().nullish(), "creator_id": z.any().nullish(), "owner_id": z.string().nullish(), "created_at": z.string().nullish(), "phone_status": z.string().nullish(), "hubspot_id": z.any().nullish(), "salesforce_id": z.string().nullish(), "crm_owner_id": z.string().nullish(), "parent_account_id": z.any().nullish(), "sanitized_phone": z.string().nullish(), "account_playbook_statuses": z.array(z.any()).nullish(), "account_rule_config_statuses": z.array(z.object({ "_id": z.string().nullish(), "created_at": z.any().nullish(), "rule_action_config_id": z.string().nullish(), "rule_config_id": z.string().nullish(), "status_cd": z.string().nullish(), "updated_at": z.any().nullish(), "id": z.string().nullish(), "key": z.string().nullish() })).nullish(), "existence_level": z.string().nullish(), "label_ids": z.array(z.string()).nullish(), "typed_custom_fields": z.object({}).nullish(), "custom_field_errors": z.any().nullish(), "modality": z.string().nullish(), "source_display_name": z.string().nullish(), "salesforce_record_url": z.string().nullish(), "crm_record_url": z.string().nullish() }).nullish(), "departments": z.array(z.string()).nullish(), "subdepartments": z.array(z.string()).nullish(), "seniority": z.string().nullish(), "functions": z.array(z.string()).nullish(), "intent_strength": z.any().nullish(), "show_intent": z.boolean().default(true).nullish(), "revealed_for_current_team": z.boolean().default(true).nullish() })).nullish() });
export var bulkPeopleEnrichmentQueryParamsSchema = z.object({ "reveal_personal_emails": z.boolean().default(false).describe("Set to 'true' if you want to enrich all matched people with personal emails. This potentially consumes credits as part of your <a href=\"https://docs.apollo.io/docs/api-pricing\" target=\"_blank\">Apollo pricing plan</a>. The default value is 'false'. <br><br>If a person resides in a <a href=\"https://knowledge.apollo.io/hc/en-us/articles/4409141087757\" target=\"_blank\">GDPR</a>-compliant region, Apollo will not reveal their personal email.").nullish(), "reveal_phone_number": z.boolean().default(false).describe("Set to 'true' if you want to enrich the data of all matched people with all available phone numbers, including mobile phone numbers. This potentially consumes credits as part of your <a href=\"https://docs.apollo.io/docs/api-pricing\" target=\"_blank\">Apollo pricing plan</a>. The default value is 'false'. <br><br>If this parameter is set to 'true', you must enter a webhook URL for the 'webhook_url' parameter. Apollo will asynchronously verify phone numbers for you, then send a JSON response that includes only details about the phone numbers to the webhook URL you provide. It can take several minutes for the phone numbers to be delivered.").nullish(), "webhook_url": z.string().describe("If you set the 'reveal_phone_number' parameter to 'true', this parameter becomes mandatory. Otherwise, do not use this parameter. <br><br>Enter the webhook URL that specifies where Apollo should send a JSON response that includes the phone numbers you requested. Apollo suggests testing this flow to ensure you receive the separate response with the phone numbers. <br><br>Example: 'https://webhook.site/cc4cf44e-e047-4774-8dac-473d28474e40'").nullish() });
