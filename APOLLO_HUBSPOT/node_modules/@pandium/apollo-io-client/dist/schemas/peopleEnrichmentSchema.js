import { z } from "zod";
/**
 * @description 401
 */
export var peopleEnrichment401Schema = z.any();
/**
      * @description 429
      */
export var peopleEnrichment429Schema = z.object({ "message": z.string().nullish() });
/**
      * @description 200
      */
export var peopleEnrichmentMutationResponseSchema = z.object({ "person": z.object({ "id": z.string().nullish(), "first_name": z.string().nullish(), "last_name": z.string().nullish(), "name": z.string().nullish(), "linkedin_url": z.string().nullish(), "title": z.string().nullish(), "email_status": z.string().nullish(), "photo_url": z.string().nullish(), "twitter_url": z.any().nullish(), "github_url": z.any().nullish(), "facebook_url": z.any().nullish(), "extrapolated_email_confidence": z.any().nullish(), "headline": z.string().nullish(), "email": z.string().email().nullish(), "organization_id": z.string().nullish(), "employment_history": z.array(z.object({ "_id": z.string().nullish(), "created_at": z.any().nullish(), "current": z.boolean().default(true).nullish(), "degree": z.any().nullish(), "description": z.any().nullish(), "emails": z.any().nullish(), "end_date": z.any().nullish(), "grade_level": z.any().nullish(), "kind": z.any().nullish(), "major": z.any().nullish(), "organization_id": z.string().nullish(), "organization_name": z.string().nullish(), "raw_address": z.any().nullish(), "start_date": z.string().nullish(), "title": z.string().nullish(), "updated_at": z.any().nullish(), "id": z.string().nullish(), "key": z.string().nullish() })).nullish(), "state": z.string().nullish(), "city": z.string().nullish(), "country": z.string().nullish(), "contact_id": z.string().nullish(), "contact": z.object({ "contact_roles": z.array(z.any()).nullish(), "id": z.string().nullish(), "first_name": z.string().nullish(), "last_name": z.string().nullish(), "name": z.string().nullish(), "linkedin_url": z.string().nullish(), "title": z.string().nullish(), "contact_stage_id": z.string().nullish(), "owner_id": z.any().nullish(), "creator_id": z.string().nullish(), "person_id": z.string().nullish(), "email_needs_tickling": z.any().nullish(), "organization_name": z.string().nullish(), "source": z.string().nullish(), "original_source": z.string().nullish(), "organization_id": z.string().nullish(), "headline": z.string().nullish(), "photo_url": z.any().nullish(), "present_raw_address": z.string().nullish(), "linkedin_uid": z.any().nullish(), "extrapolated_email_confidence": z.any().nullish(), "salesforce_id": z.any().nullish(), "salesforce_lead_id": z.any().nullish(), "salesforce_contact_id": z.any().nullish(), "salesforce_account_id": z.any().nullish(), "crm_owner_id": z.any().nullish(), "created_at": z.string().nullish(), "emailer_campaign_ids": z.array(z.any()).nullish(), "direct_dial_status": z.any().nullish(), "direct_dial_enrichment_failed_at": z.any().nullish(), "email_status": z.string().nullish(), "email_source": z.any().nullish(), "account_id": z.string().nullish(), "last_activity_date": z.any().nullish(), "hubspot_vid": z.any().nullish(), "hubspot_company_id": z.any().nullish(), "crm_id": z.any().nullish(), "sanitized_phone": z.string().nullish(), "merged_crm_ids": z.any().nullish(), "updated_at": z.string().nullish(), "queued_for_crm_push": z.any().nullish(), "suggested_from_rule_engine_config_id": z.any().nullish(), "email_unsubscribed": z.any().nullish(), "label_ids": z.array(z.any()).nullish(), "has_pending_email_arcgate_request": z.boolean().default(true).nullish(), "has_email_arcgate_request": z.boolean().default(true).nullish(), "existence_level": z.string().nullish(), "email": z.string().email().nullish(), "email_from_customer": z.boolean().default(true).nullish(), "typed_custom_fields": z.object({}).nullish(), "custom_field_errors": z.any().nullish(), "crm_record_url": z.any().nullish(), "email_status_unavailable_reason": z.any().nullish(), "email_true_status": z.string().nullish(), "updated_email_true_status": z.boolean().default(true).nullish(), "contact_rule_config_statuses": z.array(z.any()).nullish(), "source_display_name": z.string().nullish(), "contact_emails": z.array(z.object({ "email": z.string().email().nullish(), "email_md5": z.string().nullish(), "email_sha256": z.string().nullish(), "email_status": z.string().nullish(), "email_source": z.any().nullish(), "extrapolated_email_confidence": z.any().nullish(), "position": z.number().nullish(), "email_from_customer": z.any().nullish(), "free_domain": z.boolean().default(true).nullish() })).nullish(), "time_zone": z.string().nullish(), "phone_numbers": z.array(z.object({ "raw_number": z.string().nullish(), "sanitized_number": z.string().nullish(), "type": z.any().nullish(), "position": z.number().nullish(), "status": z.string().nullish(), "dnc_status": z.any().nullish(), "dnc_other_info": z.any().nullish(), "dialer_flags": z.any().nullish() })).nullish(), "account_phone_note": z.any().nullish(), "free_domain": z.boolean().default(true).nullish(), "is_likely_to_engage": z.boolean().default(true).nullish() }).nullish(), "revealed_for_current_team": z.boolean().default(true).nullish(), "organization": z.object({ "id": z.string().nullish(), "name": z.string().nullish(), "website_url": z.string().nullish(), "blog_url": z.any().nullish(), "angellist_url": z.any().nullish(), "linkedin_url": z.string().nullish(), "twitter_url": z.string().nullish(), "facebook_url": z.string().nullish(), "primary_phone": z.object({}).nullish(), "languages": z.array(z.any()).nullish(), "alexa_ranking": z.number().nullish(), "phone": z.any().nullish(), "linkedin_uid": z.string().nullish(), "founded_year": z.number().nullish(), "publicly_traded_symbol": z.any().nullish(), "publicly_traded_exchange": z.any().nullish(), "logo_url": z.string().nullish(), "crunchbase_url": z.any().nullish(), "primary_domain": z.string().nullish(), "industry": z.string().nullish(), "keywords": z.array(z.string()).nullish(), "estimated_num_employees": z.number().nullish(), "industries": z.array(z.string()).nullish(), "secondary_industries": z.array(z.any()).nullish(), "snippets_loaded": z.boolean().default(true).nullish(), "industry_tag_id": z.string().nullish(), "industry_tag_hash": z.object({ "information technology & services": z.string().nullish() }).nullish(), "retail_location_count": z.number().nullish(), "raw_address": z.string().nullish(), "street_address": z.string().nullish(), "city": z.string().nullish(), "state": z.string().nullish(), "postal_code": z.string().nullish(), "country": z.string().nullish(), "owned_by_organization_id": z.any().nullish(), "seo_description": z.string().nullish(), "short_description": z.string().nullish(), "suborganizations": z.array(z.any()).nullish(), "num_suborganizations": z.number().nullish(), "annual_revenue_printed": z.string().nullish(), "annual_revenue": z.number().nullish(), "total_funding": z.number().nullish(), "total_funding_printed": z.string().nullish(), "latest_funding_round_date": z.string().nullish(), "latest_funding_stage": z.string().nullish(), "funding_events": z.array(z.object({ "id": z.string().nullish(), "date": z.string().datetime({ offset: true }).nullish(), "news_url": z.any().nullish(), "type": z.string().nullish(), "investors": z.string().nullish(), "amount": z.string().nullish(), "currency": z.string().nullish() })).nullish(), "technology_names": z.array(z.string()).nullish(), "current_technologies": z.array(z.object({ "uid": z.string().nullish(), "name": z.string().nullish(), "category": z.string().nullish() })).nullish(), "org_chart_root_people_ids": z.array(z.string()).nullish(), "org_chart_sector": z.string().nullish(), "org_chart_removed": z.boolean().default(true).nullish(), "org_chart_show_department_filter": z.boolean().default(true).nullish() }).nullish(), "is_likely_to_engage": z.boolean().default(true).nullish(), "intent_strength": z.any().nullish(), "show_intent": z.boolean().default(true).nullish(), "departments": z.array(z.string()).nullish(), "subdepartments": z.array(z.string()).nullish(), "functions": z.array(z.string()).nullish(), "seniority": z.string().nullish() }).nullish() });
export var peopleEnrichmentQueryParamsSchema = z.object({ "first_name": z.string().describe("The first name of the person. This is typically used in combination with the 'last_name' parameter. <br><br>Example: 'tim'").nullish(), "last_name": z.string().describe("The last name of the person. This is typically used in combination with the 'first_name' parameter. <br><br>Example: 'zheng'").nullish(), "name": z.string().describe("The full name of the person. This will typically be a first name and last name separated by a space.  If you use this parameter, you do not need to use the 'first_name' and 'last_name' parameters. <br><br>Example: 'tim zheng'").nullish(), "email": z.string().email().describe("The email address of the person. <br><br>Example: 'example@email.com'").nullish(), "hashed_email": z.string().describe("The hashed email of the person. The email should adhere to either the MD5 or SHA-256 hash format. <br><br>Example: '8d935115b9ff4489f2d1f9249503cadf' (MD5) or '97817c0c49994eb500ad0a5e7e2d8aed51977b26424d508f66e4e8887746a152' (SHA-256)").nullish(), "organization_name": z.string().describe("The name of the person's employer. This can be the current employer or a previous employer. <br><br>Example: 'apollo'").nullish(), "domain": z.string().describe("The domain name for the person's employer. This can be the current employer or a previous employer. Do not include 'www.', the '@' symbol, or similar. <br><br>Example: 'apollo.io' or 'microsoft.com'").nullish(), "id": z.string().describe("The Apollo ID for the person. Each person in the Apollo database is assigned a unique ID. <br><br>To find IDs, call the <a href=\"https://docs.apollo.io/reference/people-search\" target=\"_blank\">People Search endpoint</a> and identify the values for 'person_id'. <br><br>Example: '587cf802f65125cad923a266'").nullish(), "linkedin_url": z.string().describe("The URL for the person's LinkedIn profile. <br><br>Example: 'http://www.linkedin.com/in/tim-zheng-677ba010'").nullish(), "reveal_personal_emails": z.boolean().default(false).describe("Set to 'true' if you want to enrich the person's data with personal emails. This potentially consumes credits as part of your <a href=\"https://docs.apollo.io/docs/api-pricing\" target=\"_blank\">Apollo pricing plan</a>. The default value is 'false'. <br><br>If a person resides in a <a href=\"https://knowledge.apollo.io/hc/en-us/articles/4409141087757\" target=\"_blank\">GDPR</a>-compliant region, Apollo will not reveal their personal email.").nullish(), "reveal_phone_number": z.boolean().default(false).describe("Set to 'true' if you want to enrich the person's data with all available phone numbers, including mobile phone numbers. This potentially consumes credits as part of your <a href=\"https://docs.apollo.io/docs/api-pricing\" target=\"_blank\">Apollo pricing plan</a>. The default value is 'false'. <br><br>If this parameter is set to 'true', you must enter a webhook URL for the 'webhook_url' parameter. Apollo will asynchronously verify phone numbers for you, then send a JSON response that includes only details about the person's phone numbers to the webhook URL you provide. It can take several minutes for the phone numbers to be delivered.").nullish(), "webhook_url": z.string().describe("If you set the 'reveal_phone_number' parameter to 'true', this parameter becomes mandatory. Otherwise, do not use this parameter. <br><br>Enter the webhook URL that specifies where Apollo should send a JSON response that includes the phone number you requested. Apollo suggests testing this flow to ensure you receive the separate response with the phone number. <br><br>Example: 'https://webhook.site/cc4cf44e-e047-4774-8dac-473d28474e40'").nullish() });
