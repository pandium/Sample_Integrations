import { z } from "zod";
/**
 * @description 401
 */
export var peopleSearch401Schema = z.any();
/**
      * @description 403
      */
export var peopleSearch403Schema = z.object({ "message": z.string().nullish() });
/**
      * @description 429
      */
export var peopleSearch429Schema = z.object({ "message": z.string().nullish() });
/**
      * @description 200
      */
export var peopleSearchMutationResponseSchema = z.object({ "contact_roles": z.array(z.any()).nullish(), "id": z.string().nullish(), "first_name": z.string().nullish(), "last_name": z.string().nullish(), "name": z.string().nullish(), "linkedin_url": z.string().nullish(), "title": z.string().nullish(), "contact_stage_id": z.string().nullish(), "owner_id": z.string().nullish(), "creator_id": z.string().nullish(), "person_id": z.string().nullish(), "email_needs_tickling": z.boolean().default(true).nullish(), "organization_name": z.string().nullish(), "source": z.string().nullish(), "original_source": z.string().nullish(), "organization_id": z.string().nullish(), "headline": z.string().nullish(), "photo_url": z.string().nullish(), "present_raw_address": z.string().nullish(), "linkedin_uid": z.string().nullish(), "extrapolated_email_confidence": z.any().nullish(), "salesforce_id": z.string().nullish(), "salesforce_lead_id": z.any().nullish(), "salesforce_contact_id": z.string().nullish(), "salesforce_account_id": z.string().nullish(), "crm_owner_id": z.string().nullish(), "created_at": z.string().nullish(), "emailer_campaign_ids": z.array(z.string()).nullish(), "direct_dial_status": z.string().nullish(), "direct_dial_enrichment_failed_at": z.any().nullish(), "email_status": z.string().nullish(), "email_source": z.string().nullish(), "account_id": z.string().nullish(), "last_activity_date": z.string().nullish(), "hubspot_vid": z.any().nullish(), "hubspot_company_id": z.any().nullish(), "crm_id": z.string().nullish(), "sanitized_phone": z.string().nullish(), "merged_crm_ids": z.any().nullish(), "updated_at": z.string().nullish(), "queued_for_crm_push": z.boolean().default(true).nullish(), "suggested_from_rule_engine_config_id": z.any().nullish(), "email_unsubscribed": z.any().nullish(), "label_ids": z.array(z.any()).nullish(), "has_pending_email_arcgate_request": z.boolean().default(true).nullish(), "has_email_arcgate_request": z.boolean().default(true).nullish(), "existence_level": z.string().nullish(), "email": z.string().email().nullish(), "email_from_customer": z.any().nullish(), "typed_custom_fields": z.object({ "6462b86c1a511900a3f3a30d": z.array(z.string()).nullish() }).nullish(), "custom_field_errors": z.object({}).nullish(), "salesforce_record_url": z.string().nullish(), "crm_record_url": z.string().nullish(), "email_status_unavailable_reason": z.any().nullish(), "email_true_status": z.string().nullish(), "updated_email_true_status": z.boolean().default(true).nullish(), "contact_rule_config_statuses": z.array(z.object({ "_id": z.string().nullish(), "created_at": z.any().nullish(), "rule_action_config_id": z.string().nullish(), "rule_config_id": z.string().nullish(), "status_cd": z.string().nullish(), "updated_at": z.any().nullish(), "id": z.string().nullish(), "key": z.string().nullish() })).nullish(), "source_display_name": z.string().nullish(), "twitter_url": z.any().nullish(), "contact_campaign_statuses": z.array(z.object({ "id": z.string().nullish(), "emailer_campaign_id": z.string().nullish(), "send_email_from_user_id": z.string().nullish(), "inactive_reason": z.string().nullish(), "status": z.string().nullish(), "added_at": z.string().nullish(), "added_by_user_id": z.string().nullish(), "finished_at": z.string().nullish(), "paused_at": z.any().nullish(), "auto_unpause_at": z.any().nullish(), "send_email_from_email_address": z.string().nullish(), "send_email_from_email_account_id": z.string().nullish(), "manually_set_unpause": z.any().nullish(), "failure_reason": z.any().nullish(), "current_step_id": z.any().nullish(), "in_response_to_emailer_message_id": z.any().nullish(), "cc_emails": z.any().nullish(), "bcc_emails": z.any().nullish(), "to_emails": z.any().nullish() })).nullish(), "state": z.string().nullish(), "city": z.string().nullish(), "country": z.string().nullish(), "account": z.object({ "id": z.string().nullish(), "name": z.string().nullish(), "website_url": z.string().nullish(), "blog_url": z.any().nullish(), "angellist_url": z.any().nullish(), "linkedin_url": z.string().nullish(), "twitter_url": z.string().nullish(), "facebook_url": z.string().nullish(), "primary_phone": z.object({}).nullish(), "languages": z.array(z.any()).nullish(), "alexa_ranking": z.number().nullish(), "phone": z.string().nullish(), "linkedin_uid": z.string().nullish(), "founded_year": z.number().nullish(), "publicly_traded_symbol": z.any().nullish(), "publicly_traded_exchange": z.any().nullish(), "logo_url": z.string().nullish(), "crunchbase_url": z.any().nullish(), "primary_domain": z.string().nullish(), "domain": z.string().nullish(), "team_id": z.string().nullish(), "organization_id": z.string().nullish(), "account_stage_id": z.any().nullish(), "source": z.string().nullish(), "original_source": z.string().nullish(), "creator_id": z.any().nullish(), "owner_id": z.string().nullish(), "created_at": z.string().nullish(), "phone_status": z.string().nullish(), "hubspot_id": z.any().nullish(), "salesforce_id": z.string().nullish(), "crm_owner_id": z.string().nullish(), "parent_account_id": z.any().nullish(), "sanitized_phone": z.string().nullish(), "account_playbook_statuses": z.array(z.any()).nullish(), "account_rule_config_statuses": z.array(z.object({ "_id": z.string().nullish(), "created_at": z.any().nullish(), "rule_action_config_id": z.string().nullish(), "rule_config_id": z.string().nullish(), "status_cd": z.string().nullish(), "updated_at": z.any().nullish(), "id": z.string().nullish(), "key": z.string().nullish() })).nullish(), "existence_level": z.string().nullish(), "label_ids": z.array(z.string()).nullish(), "typed_custom_fields": z.object({}).nullish(), "custom_field_errors": z.object({}).nullish(), "modality": z.string().nullish(), "source_display_name": z.string().nullish(), "salesforce_record_url": z.string().nullish(), "crm_record_url": z.string().nullish() }).nullish(), "contact_emails": z.array(z.object({ "email": z.string().email().nullish(), "email_md5": z.string().nullish(), "email_sha256": z.string().nullish(), "email_status": z.string().nullish(), "email_source": z.string().nullish(), "extrapolated_email_confidence": z.any().nullish(), "position": z.number().nullish(), "email_from_customer": z.any().nullish(), "free_domain": z.boolean().default(true).nullish() })).nullish(), "organization": z.object({ "id": z.string().nullish(), "name": z.string().nullish(), "website_url": z.string().nullish(), "blog_url": z.any().nullish(), "angellist_url": z.any().nullish(), "linkedin_url": z.string().nullish(), "twitter_url": z.string().nullish(), "facebook_url": z.string().nullish(), "primary_phone": z.object({}).nullish(), "languages": z.array(z.any()).nullish(), "alexa_ranking": z.number().nullish(), "phone": z.any().nullish(), "linkedin_uid": z.string().nullish(), "founded_year": z.number().nullish(), "publicly_traded_symbol": z.any().nullish(), "publicly_traded_exchange": z.any().nullish(), "logo_url": z.string().nullish(), "crunchbase_url": z.any().nullish(), "primary_domain": z.string().nullish() }).nullish(), "employment_history": z.array(z.object({ "_id": z.string().nullish(), "created_at": z.any().nullish(), "current": z.boolean().default(true).nullish(), "degree": z.any().nullish(), "description": z.any().nullish(), "emails": z.any().nullish(), "end_date": z.any().nullish(), "grade_level": z.any().nullish(), "kind": z.any().nullish(), "major": z.any().nullish(), "organization_id": z.string().nullish(), "organization_name": z.string().nullish(), "raw_address": z.any().nullish(), "start_date": z.string().nullish(), "title": z.string().nullish(), "updated_at": z.any().nullish(), "id": z.string().nullish(), "key": z.string().nullish() })).nullish(), "time_zone": z.string().nullish(), "intent_strength": z.any().nullish(), "show_intent": z.boolean().default(true).nullish(), "phone_numbers": z.array(z.object({ "raw_number": z.string().nullish(), "sanitized_number": z.string().nullish(), "type": z.string().nullish(), "position": z.number().nullish(), "status": z.string().nullish(), "dnc_status": z.string().nullish(), "dnc_other_info": z.any().nullish(), "dialer_flags": z.object({ "country_name": z.string().nullish(), "country_enabled": z.boolean().default(true).nullish(), "high_risk_calling_enabled": z.boolean().default(true).nullish(), "potential_high_risk_number": z.boolean().default(true).nullish() }).nullish() })).nullish(), "account_phone_note": z.any().nullish(), "free_domain": z.boolean().default(true).nullish(), "is_likely_to_engage": z.boolean().default(true).nullish(), "email_domain_catchall": z.boolean().default(true).nullish(), "contact_job_change_event": z.any().nullish() });
export var peopleSearchQueryParamsSchema = z.object({ "person_titles[]": z.array(z.string()).describe("Job titles held by the people you want to find. For a person to be included in search results, they only need to match 1 of the job titles you add. Adding more job titles expands your search results. <br><br>Results also include job titles with the same terms, even if they are not exact matches. For example, searching for 'marketing manager' might return people with the job title 'content marketing manager'. <br><br>Use this parameter in combination with the 'person_seniorities[]' parameter to find people based on specific job functions and seniority levels. <br><br>Examples: 'sales development representative'; 'marketing manager'; 'research analyst'").nullish(), "person_locations[]": z.array(z.string()).describe("The location where people live. You can search across cities, US states, and countries. <br><br>To find people based on the headquarters locations of their current employer, use the 'organization_locations' parameter. <br><br>Examples: 'california'; 'ireland'; 'chicago'").nullish(), "person_seniorities[]": z.array(z.string()).describe("The job seniority that people hold within their current employer. This enables you to find people that currently hold positions at certain reporting levels, such as Director level or senior IC level. For a person to be included in search results, they only need to match 1 of the seniorities you add. Adding more seniorities expands your search results. <br><br>Searches only return results based on their current job title, so searching for Director-level employees only returns people that currently hold a Director-level title. If someone was previously a Director, but is currently a VP, they would not be included in your search results. <br><br>Use this parameter in combination with the 'person_titles[]' parameter to find people based on specific job functions and seniority levels. <br><br>Example: 'director'; 'senior'; 'vp'").nullish(), "organization_locations[]": z.array(z.string()).describe("The location of the company headquarters for a person's current employer. You can search across cities, US states, and countries. <br><br>If a company has several office locations, results are still based on the headquarters location. For example, if you search 'chicago' but a company's HQ location is in 'boston', people that work for the Boston-based company will not appear in your results, even if they match other parameters. <br><br>To find people based on their personal location, use the 'person_locations' parameter. <br><br>Examples: 'texas'; 'tokyo'; 'spain'").nullish(), "q_organization_domains": z.array(z.string()).describe("The domain name for the person's employer. This can be the current employer or a previous employer. Do not include 'www.', the '@' symbol, or similar. <br><br>You can add multiple domains to search across companies. <br><br>Examples: 'apollo.io' and 'microsoft.com'").nullish(), "contact_email_status[]": z.array(z.string()).describe("The email statuses for the people you want to find. You can add multiple statuses to expand your search. <br><br>The statuses you can search include:  <ul> <li> <code>verified</code> </li> <li> <code>unverified</code> </li> <li> <code>likely to engage</code> </li> <li> <code>unavailable</code> </li>  </ul>").nullish(), "organization_ids[]": z.array(z.string()).describe("The Apollo IDs for the companies (employers) you want to include in your search results. Each company in the Apollo database is assigned a unique ID. <br><br>To find IDs, call the <a href=\"https://docs.apollo.io/reference/organization-search\" target=\"_blank\">Organization Search endpoint</a> and identify the values for 'organization_id'.  <br><br>Example: '5e66b6381e05b4008c8331b8'").nullish(), "organization_num_employees_ranges[]": z.array(z.string()).describe("The number range of employees working for the person's current company. This enables you to find people based on the headcount of their employer. You can add multiple ranges to expand your search results. <br><br>Each range you add needs to be a string, with the upper and lower numbers of the range separated only by a comma. <br><br>Examples: '1,10'; '250,500'; '10000,20000'").nullish(), "q_keywords": z.string().describe("A string of words over which we want to filter the results").nullish(), "page": z.number().describe("The page number of the Apollo data that you want to retrieve. <br><br>Use this parameter in combination with the 'per_page' parameter to make search results for navigable and improve the performance of the endpoint. <br><br>Example: '4'").nullish(), "per_page": z.number().describe("\"The number of search results that should be returned for each page. Limited the number of results per page improves the endpoint's performance. <br><br>Use the 'page' parameter to search the different pages of data. <br><br>Example: '10'").nullish() });
