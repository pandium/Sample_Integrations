import { z } from "zod";
/**
 * @description 401
 */
export var searchForAccounts401Schema = z.any();
/**
      * @description 403
      */
export var searchForAccounts403Schema = z.object({ "message": z.string().nullish() });
/**
      * @description 422
      */
export var searchForAccounts422Schema = z.union([z.object({ "error": z.string().nullish(), "skip_alert_dialog": z.boolean().default(true).nullish() }), z.object({ "error": z.string().nullish() })]);
/**
      * @description 429
      */
export var searchForAccounts429Schema = z.object({ "message": z.string().nullish() });
/**
      * @description 200
      */
export var searchForAccountsMutationResponseSchema = z.object({ "id": z.string().nullish(), "domain": z.string().nullish(), "name": z.string().nullish(), "team_id": z.string().nullish(), "organization_id": z.any().nullish(), "account_stage_id": z.string().nullish(), "source": z.string().nullish(), "original_source": z.string().nullish(), "creator_id": z.any().nullish(), "owner_id": z.string().nullish(), "created_at": z.string().nullish(), "phone": z.string().nullish(), "phone_status": z.string().nullish(), "hubspot_id": z.any().nullish(), "salesforce_id": z.any().nullish(), "crm_owner_id": z.any().nullish(), "parent_account_id": z.any().nullish(), "linkedin_url": z.any().nullish(), "sanitized_phone": z.string().nullish(), "account_playbook_statuses": z.array(z.any()).nullish(), "account_rule_config_statuses": z.array(z.any()).nullish(), "existence_level": z.string().nullish(), "label_ids": z.array(z.any()).nullish(), "typed_custom_fields": z.object({}).nullish(), "custom_field_errors": z.object({}).nullish(), "modality": z.string().nullish(), "source_display_name": z.string().nullish(), "crm_record_url": z.any().nullish(), "contact_emailer_campaign_ids": z.array(z.any()).nullish(), "contact_campaign_status_tally": z.object({}).nullish(), "num_contacts": z.number().nullish(), "last_activity_date": z.any().nullish(), "intent_strength": z.any().nullish(), "show_intent": z.boolean().default(true).nullish(), "has_intent_signal_account": z.boolean().default(true).nullish(), "intent_signal_account": z.any().nullish() });
export var searchForAccountsQueryParamsSchema = z.object({ "q_organization_name": z.string().describe("Add keywords to narrow the search of the accounts in your team's Apollo account. <br><br>Keywords should directly match at least part of an account's name. For example, searching the keyword 'marketing' might return the result 'NY Marketing Unlimited', but not 'NY Market Analysts'. <br><br>This parameter only searches account names, not other account fields. <br><br>Examples: 'apollo'; 'microsoft'; 'marketing'").nullish(), "account_stage_ids[]": z.array(z.string()).describe("The Apollo IDs for the account stages that you want to include in your search results. If you add multiple account stages, Apollo will include all accounts that match any of the stages, along with the other parameters, in the search results. <br><br>Call the <a href=\"https://docs.apollo.io/reference/list-account-stages\" target=\"_blank\">List Account Stages endpoint</a> to retrieve a list of all the account stage IDs available in your Apollo account. <br><br>Example: '61b8e913e0f4d2012e3af74e'").nullish(), "sort_by_field": z.string().describe("Sort the matching accounts by 1 of the following options:   <ul> <li> 'account_last_activity_date': The most recent activity date recorded first. </li> <li> 'account_created_at': The most recently created first. </li> <li> 'account_updated_at': The most recently updated first. </li> </ul>").nullish(), "sort_ascending": z.boolean().default(false).describe("Set to 'true' to sort the matching contacts in ascending order. <br><br>This parameter must be used with 'sort_by_field'. Otherwise, the sorting logic is not applied. <br><br>Example: 'true'").nullish(), "page": z.number().describe("The page number of the Apollo data that you want to retrieve. <br><br>Use this parameter in combination with the 'per_page' parameter to make search results for navigable and improve the performance of the endpoint. <br><br>Example: '4'").nullish(), "per_page": z.number().describe("The number of search results that should be returned for each page. Limited the number of results per page improves the endpoint's performance. <br><br>Use the 'page' parameter to search the different pages of data. <br><br>Example: '10'").nullish() });
