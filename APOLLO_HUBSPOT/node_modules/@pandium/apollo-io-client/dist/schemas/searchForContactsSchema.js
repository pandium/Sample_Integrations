import { z } from "zod";
/**
 * @description 401
 */
export var searchForContacts401Schema = z.any();
/**
      * @description 403
      */
export var searchForContacts403Schema = z.object({ "message": z.string().nullish() });
/**
      * @description 429
      */
export var searchForContacts429Schema = z.object({ "message": z.string().nullish() });
/**
      * @description 200
      */
export var searchForContactsMutationResponseSchema = z.object({ "contact_roles": z.array(z.any()).nullish(), "id": z.string().nullish(), "first_name": z.string().nullish(), "last_name": z.string().nullish(), "name": z.string().nullish(), "linkedin_url": z.any().nullish(), "title": z.string().nullish(), "contact_stage_id": z.string().nullish(), "owner_id": z.string().nullish(), "creator_id": z.string().nullish(), "person_id": z.any().nullish(), "email_needs_tickling": z.any().nullish(), "organization_name": z.string().nullish(), "source": z.string().nullish(), "original_source": z.string().nullish(), "organization_id": z.string().nullish(), "headline": z.any().nullish(), "photo_url": z.any().nullish(), "present_raw_address": z.any().nullish(), "linkedin_uid": z.any().nullish(), "extrapolated_email_confidence": z.any().nullish(), "salesforce_id": z.any().nullish(), "salesforce_lead_id": z.any().nullish(), "salesforce_contact_id": z.any().nullish(), "salesforce_account_id": z.any().nullish(), "crm_owner_id": z.any().nullish(), "created_at": z.string().nullish(), "emailer_campaign_ids": z.array(z.any()).nullish(), "direct_dial_status": z.any().nullish(), "direct_dial_enrichment_failed_at": z.any().nullish(), "email_status": z.string().nullish(), "email_source": z.any().nullish(), "account_id": z.string().nullish(), "last_activity_date": z.any().nullish(), "hubspot_vid": z.any().nullish(), "hubspot_company_id": z.any().nullish(), "crm_id": z.any().nullish(), "sanitized_phone": z.any().nullish(), "merged_crm_ids": z.any().nullish(), "updated_at": z.string().nullish(), "queued_for_crm_push": z.boolean().default(true).nullish(), "suggested_from_rule_engine_config_id": z.any().nullish(), "email_unsubscribed": z.any().nullish(), "label_ids": z.array(z.any()).nullish(), "has_pending_email_arcgate_request": z.boolean().default(true).nullish(), "has_email_arcgate_request": z.boolean().default(true).nullish(), "existence_level": z.string().nullish(), "email": z.string().email().nullish(), "email_from_customer": z.boolean().default(true).nullish(), "typed_custom_fields": z.object({}).nullish(), "custom_field_errors": z.object({}).nullish(), "crm_record_url": z.any().nullish(), "email_status_unavailable_reason": z.any().nullish(), "email_true_status": z.string().nullish(), "updated_email_true_status": z.boolean().default(true).nullish(), "contact_rule_config_statuses": z.array(z.any()).nullish(), "source_display_name": z.string().nullish(), "twitter_url": z.any().nullish(), "contact_campaign_statuses": z.array(z.any()).nullish(), "account": z.object({ "id": z.string().nullish(), "name": z.string().nullish(), "website_url": z.string().nullish(), "blog_url": z.any().nullish(), "angellist_url": z.any().nullish(), "linkedin_url": z.string().nullish(), "twitter_url": z.string().nullish(), "facebook_url": z.string().nullish(), "primary_phone": z.object({}).nullish(), "languages": z.array(z.any()).nullish(), "alexa_ranking": z.number().nullish(), "phone": z.string().nullish(), "linkedin_uid": z.string().nullish(), "founded_year": z.number().nullish(), "publicly_traded_symbol": z.any().nullish(), "publicly_traded_exchange": z.any().nullish(), "logo_url": z.string().nullish(), "crunchbase_url": z.any().nullish(), "primary_domain": z.string().nullish(), "domain": z.string().nullish(), "team_id": z.string().nullish(), "organization_id": z.string().nullish(), "account_stage_id": z.any().nullish(), "source": z.string().nullish(), "original_source": z.string().nullish(), "creator_id": z.any().nullish(), "owner_id": z.string().nullish(), "created_at": z.string().nullish(), "phone_status": z.string().nullish(), "hubspot_id": z.string().nullish(), "salesforce_id": z.any().nullish(), "crm_owner_id": z.string().nullish(), "parent_account_id": z.any().nullish(), "sanitized_phone": z.string().nullish(), "account_playbook_statuses": z.array(z.any()).nullish(), "account_rule_config_statuses": z.array(z.object({ "_id": z.string().nullish(), "created_at": z.any().nullish(), "rule_action_config_id": z.string().nullish(), "rule_config_id": z.string().nullish(), "status_cd": z.string().nullish(), "updated_at": z.any().nullish(), "id": z.string().nullish(), "key": z.string().nullish() })).nullish(), "existence_level": z.string().nullish(), "label_ids": z.array(z.string()).nullish(), "typed_custom_fields": z.object({}).nullish(), "custom_field_errors": z.object({}).nullish(), "modality": z.string().nullish(), "source_display_name": z.string().nullish(), "crm_record_url": z.string().nullish() }).nullish(), "contact_emails": z.array(z.any()).nullish(), "organization": z.object({ "id": z.string().nullish(), "name": z.string().nullish(), "website_url": z.string().nullish(), "blog_url": z.any().nullish(), "angellist_url": z.any().nullish(), "linkedin_url": z.string().nullish(), "twitter_url": z.string().nullish(), "facebook_url": z.string().nullish(), "primary_phone": z.object({}).nullish(), "languages": z.array(z.any()).nullish(), "alexa_ranking": z.number().nullish(), "phone": z.any().nullish(), "linkedin_uid": z.string().nullish(), "founded_year": z.number().nullish(), "publicly_traded_symbol": z.any().nullish(), "publicly_traded_exchange": z.any().nullish(), "logo_url": z.string().nullish(), "crunchbase_url": z.any().nullish(), "primary_domain": z.string().nullish() }).nullish(), "intent_strength": z.any().nullish(), "show_intent": z.boolean().default(true).nullish(), "phone_numbers": z.array(z.any()).nullish(), "account_phone_note": z.any().nullish(), "free_domain": z.boolean().default(true).nullish(), "is_likely_to_engage": z.boolean().default(true).nullish(), "email_domain_catchall": z.boolean().default(true).nullish(), "contact_job_change_event": z.any().nullish() });
export var searchForContactsQueryParamsSchema = z.object({ "q_keywords": z.string().describe("Add keywords to narrow the search of the contacts in your team's Apollo account. <br><br>Keywords can include combinations of names, job titles, employers (company names), and email addresses. <br><br>Examples: 'tim zheng'; 'senior research analyst'; 'microsoft'").nullish(), "contact_stage_ids[]": z.array(z.string()).describe("The Apollo IDs for the contact stages that you want to include in your search results. If you add multiple contact stages, Apollo will include all contacts that match any of the stages, along with the other parameters, in the search results. <br><br>Call the <a href=\"https://docs.apollo.io/reference/list-contact-stages\" target=\"_blank\">List Contact Stages endpoint</a> to retrieve a list of all the contact stage IDs available in your Apollo account. <br>Example: '6095a710bd01d100a506d4ae'").nullish(), "sort_by_field": z.string().describe("Sort the matching contacts by 1 of the following options: <ul> <li> 'contact_last_activity_date': The most recent activity date recorded first. </li> <li> 'contact_email_last_opened_at': The most recent email opened date first. </li> <li> 'contact_email_last_clicked_at': The most recent email clicked first. </li> <li> 'contact_created_at': The most recently created first. </li> <li> 'contact_updated_at': The most recently updated first. </li> </ul>").nullish(), "sort_ascending": z.boolean().default(false).describe("Set to 'true' to sort the matching contacts in ascending order. <br><br>This parameter must be used with 'sort_by_field'. Otherwise, the sorting logic is not applied. <br><br>Example: 'true'").nullish(), "per_page": z.number().describe("The page number of the Apollo data that you want to retrieve. <br><br>Use this parameter in combination with the 'per_page' parameter to make search results for navigable and improve the performance of the endpoint. <br><br>Example: '4'").nullish(), "page": z.number().describe("The number of search results that should be returned for each page. Limited the number of results per page improves the endpoint's performance. <br><br>Use the 'page' parameter to search the different pages of data. <br><br>Example: '10'").nullish() });
